const AppError = require('../utils/app_error');

const sendDevError = (error, res) => {
  res.status(error.statusCode).json({
    status: error.status,
    message: error.message,
    error: error,
    stack: error.stack,
  });
};

const sendProdError = (error, res) => {
  let err = { ...error };

  if (error.name === 'CastError') err = handleCastErrorDB(err);
  if (error.name === 'ValidationError') err = handleValidationErrorDB(err);
  if (error.code === 11000) err = handleDuplicateFieldsDB(err);

  if (err.isOperational) {
    // These errors are generated by us, Using AppError class
    res.status(err.statusCode).json({
      status: err.status,
      message: err.message,
    });
  } else {
    // If we are here then that means there is some kind of unhandled error
    console.error(err);
    res.status(500).json({
      status: 'error',
      message: 'Something went very wrong. Please contact backend team',
    });
  }
};

const handleCastErrorDB = (error) => {
  const message = `Invalid ${error.path}: ${error.value}`;
  return new AppError(400, message);
};

const handleDuplicateFieldsDB = (error) => {
  const keyValues = error.keyValue;
  const firstDuplicateField = keyValues[Object.keys(keyValues)[0]];
  const message = `Duplicate field: ${firstDuplicateField}. Please use a different value.`;
  return new AppError(400, message);
};

const handleValidationErrorDB = (error) => {
  const keyValues = error.errors;
  const firstValidationError = keyValues[Object.keys(keyValues)[0]];
  const message = firstValidationError.message;
  return new AppError(400, message);
};

module.exports = (error, req, res, next) => {
  error.statusCode = error.statusCode || 500;
  error.status = error.status || 'error';

  if (process.env.NODE_ENV === 'development.') {
    sendDevError(error, res);
  } else {
    sendProdError(error, res);
  }
};
